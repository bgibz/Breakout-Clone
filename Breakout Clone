<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Breakout Clone</title>
    <style>
    	* { padding: 0; margin: 0; }
    	canvas { background: #eee; display: block; margin: 0 auto; }
    </style>
</head>
<body>

<canvas id="canvas" width="480" height="320"></canvas>

<script>
	
	var canvas = document.getElementById("canvas");
	var ctx = canvas.getContext("2d");

	var score = 0;
	var lives = 3;
	
	//radius of the ball
	var ballSize = 6;
	var ballColour = "#0095DD"

	var ballSpeed = -2

	//set starting point for ball
	var x = canvas.width/2;
	var y = canvas.height-30;

	//set speed for ball
	var dx = 2;
	var dy = ballSpeed;

	//variables which define the paddle
	var paddleHeight = 10;
	var paddleWidth = 75;
	var paddleX = (canvas.width-paddleWidth)/2;
	var paddleSpeed = 5;


	//variables which define the bricks
	var brickRows = 3;
	var brickColumns = 5;
	var brickWidth = 75;
	var brickHeight = 20;
	var brickPadding = 10;
	var brickOffsetTop = 30;
	var brickOffsetLeft = 30;
	var brickHealth = 2;
	
	var bricks = [];
	for(c=0; c<brickColumns; c++) {
    	bricks[c] = [];
    	for(r=0; r<brickRows; r++) {
        	bricks[c][r] = { x: 0, y: 0, health: brickHealth };
    	}
	}

	//Boolean values for keyboard controls
	var rightPressed = false;
	var leftPressed = false;


	//Functions

	function getRandomInt(min, max) {
  		min = Math.ceil(min);
  		max = Math.floor(max);
  		return Math.floor(Math.random() * (max - min)) + min;
	}
	//draw the ball
	function drawBall() {
		ctx.beginPath();
    	ctx.arc(x, y, ballSize, 0, Math.PI*2);
    	ctx.fillStyle = ballColour;
    	ctx.fill();
    	ctx.closePath();
	}

	//draw the paddle
	function drawPaddle() {
    	ctx.beginPath();
    	ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
    	ctx.fillStyle = "#0095DD";
    	ctx.fill();
    	ctx.closePath();
	}
	
	//draw the bricks
	function drawBricks() {
		for (c=0; c<brickColumns; c++) {
			for (r=0; r<brickRows; r++) {
				var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
            	var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
            	if (bricks[c][r].health > 0) {
					bricks[c][r].x = brickX;
					bricks[c][r].y = brickY;
					ctx.beginPath();
					ctx.rect(brickX, brickY, brickWidth, brickHeight);
					//represent if a brick is at low health or not
					if(bricks[c][r].health === 2) {
						ctx.fillStyle = "#0095DD";
					}
					else  {
						ctx.fillStyle = "#FF0000";
					}
					ctx.fill();
					ctx.closePath();
				}
			}
		}
	}
	
	//determine if the ball has contacted a brick
	function brickCollision() {
    	for(c=0; c<brickColumns; c++) {
        	for(r=0; r<brickRows; r++) {
            	var b = bricks[c][r];
            	if(b.health >= 1) {
                	if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                    	dy = -dy;
                    	b.health--;
                    	score++;
                    }
           		}
       		}
   		}
	}

	//display the current score
	function drawScore() {
    	ctx.font = "16px Arial";
    	ctx.fillStyle = "#0095DD";
    	ctx.fillText("Score: "+score, 8, 20);
	}	
	//display the players remaining lives
	function drawLives() {
		ctx.font = "16px Arial";
		ctx.fillStyle = "#0095DD";
		ctx.fillText("Lives: "+lives, canvas.width-65, 20);
	}
	
	//Update the game
	function draw() {
		//clear the canvas before redrawing game
		ctx.clearRect(0, 0, canvas.width, canvas.height)

		//add game elements
    	drawBall();
    	drawPaddle();
    	drawScore();
    	drawLives();
    	brickCollision();
    	drawBricks();

    	//collision detection for the ball and canvas edges
    	if(x + dx > canvas.width-ballSize || x + dx < ballSize) {
   			dx = -dx;
		}
		if(y + dy < ballSize) {
    		dy = -dy;
		}
		//collision detection with paddle
		else if (y + dy > canvas.height - ballSize){
			if (x > paddleX && x < (paddleX + paddleWidth)) {
				dy = -dy;
				//if paddle moving opposite direction of ball, send ball the other direction
				if(rightPressed === true && dx < 0) {
					dx = -dx;
				}
				if(leftPressed === true && dx > 0) {
					dx = -dx;
				}
				
			}
			else {
				lives--;
				if (!lives) {
					alert("Game Over");
					document.location.reload(true);
				}
				else {
					x = canvas.width/2;
					y = canvas.height-30;
					dx = 2;
					dy = ballSpeed;
					paddleX = (canvas.width - paddleWidth)/2;
				}
			}
		}

		//Update paddle location.
		if(rightPressed && paddleX < canvas.width-paddleWidth) {
	    	paddleX += paddleSpeed;
		}
		else if(leftPressed && paddleX > 0) {
    		paddleX -= paddleSpeed;
		}

	//update ball location
	x += dx;
	y += dy;

	//Check if game is won and display congratulations
	var sum = 0;
	for(c=0; c<brickColumns; c++) {
        	for(r=0; r<brickRows; r++) {
        		sum += bricks[c][r].health;
        	}
        }
        if (sum === 0) {
        	alert("congratulations! You Win!")
        	document.location.reload(true);
        }
   
   	requestAnimationFrame(draw)

	}

	document.addEventListener("keydown", keyDownHandler, false);
	document.addEventListener("keyup", keyUpHandler, false);

	//key press listeners, allow the user to control the paddle

	function keyDownHandler(e) {
    	if(e.keyCode == 39) {
        	rightPressed = true;
    	}
    	else if(e.keyCode == 37) {
        	leftPressed = true;
    	}
	}

	function keyUpHandler(e) {
    	if(e.keyCode == 39) {
        	rightPressed = false;
    	}
    	else if(e.keyCode == 37) {
        	leftPressed = false;
    	}

	}



	//redraw the game 
	draw();

</script>

</body>
</html>
